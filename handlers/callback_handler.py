import aiogram
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup
from aiogram.dispatcher.dispatcher import FSMContext

from utils.functions.get_bot_and_db import get_bot_and_db

from states_handlers.states import BotStates

from blanks.bot_dicts import towns_dicts, addition_dict, reasons_dict
from blanks.bot_markup import addition_markup, menu


async def callback_handler(call: CallbackQuery, state: FSMContext):
    bot, db = get_bot_and_db()
    tg_id = call["from"]["id"]
    callback = call.data
    m_id = call.message.message_id

    if callback.startswith("approve_driver_"):
        await call.answer(text="–í–æ–¥–∏—Ç–µ–ª—å –æ–¥–æ–±—Ä–µ–Ω", show_alert=True)
        await bot.edit_message_reply_markup(
            chat_id=tg_id,
            message_id=m_id,
            reply_markup=InlineKeyboardMarkup()
        )

        driver_id = int(callback.split("_")[2])
        db.approve_driver(tg_id=driver_id)

        await bot.send_message(
            chat_id=driver_id,
            text="–í—ã –±—ã–ª–∏ –ø—Ä–∏–Ω—è—Ç—ã –≤ –∫–∞—á–µ—Å—Ç–≤–µ –≤–æ–¥–∏—Ç–µ–ª—è, —Ç–µ–ø–µ—Ä—å –≤–∞–º –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –∑–∞–∫–∞–∑—ã –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
        )

    elif callback.startswith("decline_driver_"):
        await call.answer(text="–í–æ–¥–∏—Ç–µ–ª—å –æ—Ç–∫–ª–æ–Ω—ë–Ω", show_alert=True)
        await bot.edit_message_reply_markup(
            chat_id=tg_id,
            message_id=m_id,
            reply_markup=InlineKeyboardMarkup()
        )

        driver_id = int(callback.split("_")[2])
        db.approve_driver(tg_id=driver_id)

        await bot.send_message(
            chat_id=driver_id,
            text="–í—ã –±—ã–ª–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω—ã –≤ –∫–∞—á–µ—Å—Ç–≤–µ –≤–æ–¥–∏—Ç–µ–ª—è, –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π —Å–≤—è–∂–∏—Ç–µ—Å—å —Å @Taxifishka"
        )

    elif callback.startswith("town"):
        town_number = callback.split("_")[1]
        await bot.edit_message_text(
            chat_id=tg_id,
            message_id=m_id,
            text=f"üí¨: <i>{towns_dicts[town_number]}</i>",
            parse_mode="html",
            reply_markup=InlineKeyboardMarkup()
        )

        async with state.proxy() as data:
            data["town"] = towns_dicts[town_number]

        await bot.send_message(
            chat_id=tg_id,
            text="–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å, –æ—Ç–∫—É–¥–∞ –≤–∞—Å –∑–∞–±–∏—Ä–∞—Ç—å"
        )

        await BotStates.landing_point.set()

    elif callback.startswith("add_variable_point"):
        await bot.edit_message_text(
            chat_id=tg_id,
            text=f"üí¨: <i>–î–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é —Ç–æ—á–∫—É</i>",
            parse_mode="html",
            reply_markup=InlineKeyboardMarkup(),
            message_id=m_id
        )

        await bot.send_message(
            chat_id=tg_id,
            text="–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π —Ç–æ—á–∫–∏",
        )

        await BotStates.variable_point.set()

    elif callback.startswith("cancel_variable_point"):
        await bot.edit_message_text(
            chat_id=tg_id,
            text=f"üí¨: <i>–ù–µ –¥–æ–±–∞–≤–ª—è—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é —Ç–æ—á–∫—É</i>",
            parse_mode="html",
            reply_markup=InlineKeyboardMarkup(),
            message_id=m_id
        )

        await bot.send_message(
            chat_id=tg_id,
            text="–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –ø–æ–µ–∑–¥–∫–∏, –ª–∏–±–æ –∑–∞–≤–µ—Ä—à–∏—Ç–µ –∑–∞–∫–∞–∑",
            reply_markup=addition_markup
        )

    elif callback.startswith("addition"):
        addition_number = callback.split("_")[1]
        l_text = list()
        l_data = list()
        cd = call.message.reply_markup.inline_keyboard

        async with state.proxy() as data:
            for l_el in cd:
                for el in l_el:
                    text = el["text"]
                    callback_data = el["callback_data"]
                    # print(data, "DATA")
                    print(callback_data, callback)

                    if callback == callback_data and text[0] != "‚úÖ":
                        text = "‚úÖ " + text
                        data[f"addition_{addition_number}"] = str(addition_number)
                    elif callback_data == callback and text[0] == '‚úÖ':
                        text = text[2:]
                        del data[f"addition_{addition_number}"]

                    l_data.append(callback_data)
                    l_text.append(text)

        i_mp = InlineKeyboardMarkup()
        count = 0
        for text, ca in zip(l_text, l_data):
            i_mp.add(
                InlineKeyboardButton(
                    text=text,
                    callback_data=ca
                )
            )

            count += 1

        await bot.edit_message_reply_markup(
            chat_id=tg_id,
            message_id=m_id,
            reply_markup=i_mp
        )

    elif callback == "complete_order":
        try:
            await bot.edit_message_reply_markup(
                chat_id=tg_id,
                message_id=m_id,
                reply_markup=InlineKeyboardMarkup()
            )
        except Exception as e:
            print(e)

        drivers_ids = db.get_approved_drivers()
        text = "–ù–æ–≤—ã–π –∑–∞–∫–∞–∑!"
        async with state.proxy() as data:
            landing_point = data["landing_point"]
            end_point = data["end_point"]
            variable_point = data.get("variable_point")

            text += f"\n–û—Ç–∫—É–¥–∞ –∑–∞–±–∏—Ä–∞—Ç—å: <i>{landing_point}</i>"
            if variable_point:
                text += f"\n–ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π –∞–¥—Ä–µ—Å: <i>{variable_point}</i>"
            text += f"\n–ö–æ–Ω–µ—á–Ω–∞—è —Ç–æ—á–∫–∞: <i>{end_point}</i>\n\n"

            for num in range(1, 5):
                addition_number = data.get(f"addition_{num}")
                if addition_number:
                    text += f"{addition_dict[addition_number]}: ‚úÖ\n"

        await bot.send_message(
            chat_id=tg_id,
            text="–û–∂–∏–¥–∞–π—Ç–µ, —Å –í–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –≤–æ–¥–∏—Ç–µ–ª—å",
            reply_markup=ReplyKeyboardMarkup(resize_keyboard=True).add("–û—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç –∑–∞–∫–∞–∑–∞")
        )

        db.add_order(customer_id=tg_id, order_text=text)

        for driver_id in drivers_ids:
            order_message = await bot.send_message(
                chat_id=driver_id,
                text=text,
                parse_mode="html",
                reply_markup=InlineKeyboardMarkup().add(
                    InlineKeyboardButton(
                        text="–ü—Ä–∏–Ω—è—Ç—å –∑–∞–∫–∞–∑",
                        callback_data=f"accept_order_{tg_id}"
                    )
                )
            )

            db.add_order_message(
                customer_id=tg_id,
                driver_id=driver_id,
                m_id=order_message.message_id
            )

        await state.finish()

    elif callback.startswith("accept_order"):
        customer_id = int(callback.split("_")[2])

        await bot.send_message(
            chat_id=customer_id,
            text="–í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç. –í—Å–µ —Å–ª–µ–¥—É—é—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫—Ä–æ–º–µ –∫–æ–º–∞–Ω–¥ –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤–æ–¥–∏—Ç–µ–ª—é.\n"
                 f"–ü–æ–¥—ä–µ–¥–µ—Ç –º–∞—à–∏–Ω–∞: <b>{db.get_car_brand(driver_id=tg_id)}</b>",
            parse_mode="html"
        )

        db.add_bunch(
            driver_id=tg_id,
            customer_id=customer_id
        )

        order_text = db.get_order_text(customer_id=customer_id)
        drivers_ids = db.get_approved_drivers()
        for driver_id in drivers_ids:
            try:
                await bot.edit_message_text(
                    chat_id=driver_id,
                    message_id=db.get_order_message(
                        driver_id=driver_id,
                        customer_id=customer_id
                    ),
                    text=order_text + f"\n\n<i>–ó–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç</i>",
                    parse_mode="html",
                    reply_markup=InlineKeyboardMarkup()
                )
            except Exception as e:
                print(e)

        await bot.send_message(
            chat_id=tg_id,
            text="–¢–µ–ø–µ—Ä—å —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –ø–∏—à–∏—Ç–µ –≤ —á–∞—Ç, –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –ø–∞—Å—Å–∞–∂–∏—Ä—É",
            reply_markup=ReplyKeyboardMarkup(resize_keyboard=True).add("–ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–∫–∞–∑")
        )

    elif callback.startswith("reason"):
        number = callback.split("_")[1]

        driver_id = db.get_driver_bunch(customer_id=tg_id)

        await bot.send_message(
            chat_id=tg_id,
            text="–í—ã –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å –æ—Ç –∑–∞–∫–∞–∑–∞",
            reply_markup=menu
        )

        await bot.send_message(
            chat_id=driver_id,
            text=f"–ü–∞—Å—Å–∞–∂–∏—Ä –æ—Ç–∫–∞–∑–∞–ª—Å—è –æ—Ç –∑–∞–∫–∞–∑–∞ –ø–æ –ø—Ä–∏—á–∏–Ω–µ:\n"
                 f"<b>{reasons_dict[number]}</b>",
            parse_mode="html",
            reply_markup=menu
        )

        db.delete_bunch(driver_id=driver_id)
        db.delete_order_text(customer_id=tg_id)
        db.delete_order_message(customer_id=tg_id)

